Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-01-31T07:53:19+01:00

====== Bazy danych ======
Created środa 31 styczeń 2018

__PROJEKTOWANIE BAZY DANYCH:__
* tabela
* pola=kolumy (zawierają dane tego samego typu, np. liczby, tekst)
* rekord informacji - zbiór pól w tabeli

SQL- strukturalny język zapytań w bazach danych

__PROGRAMY:__
microsoft access
libreoffice base
**SQLiteStudio** 

nespójność bazy danych - za dużo informacji, chaotyczność

relacyjna baza danych - składa się z wielu tabel połączonych relacjami

**systemy/silinki baz danych**
* mySQL
* MariaDB
* PostgreSQL
* Microsoft SQLServer
* SQLite3

TYPY BANYCH:
* liczboowe:
	- integer - liczby całkowite
	- float lub real - liczby zmiennoprzecinkowe
* data i czas:
	-date - data, np. w formacie ISO ( rrrr-mm-dd)
	-datetime - data i czas
	
primary key - klucz główny
 
podstawowym typem relacji w bazach danych jest jeden do wielu

autoinkrementacja

ANOMALIE BAZ DANYCH:
	- anomalia usówania
	- anomalia modyfikacji
	- anomalia dodawania
	- redundancja

NORMALIZACJA BAZY DANYCH

__Normalizacja__ to bezstratny proces organizowania danych w tabelach mający na celu zmniejszenie ilości danych składowanych w bazie oraz wyeliminowanie potencjalnych anomalii

* PIERWSZA POSTAĆ NORMALNA 

== atomowość danych - każde pole w bazie przechowuje jedną informacje ==
			Mówimy, że tabela (encja) jest w pierwszej postaci normalnej, kiedy wiersz przechowuje informacje o pojedynczym obiekcie, nie zawiera kolekcji, posiada klucz główny (kolumnę lub grupę kolumn jednoznacznie identyfikujących go w zbiorze) a dane są atomowe.
			
* DRUGA POSTAĆ NORMALNA
   każda tabela powinna przechowywać dane dotyczące tylko konkretnej klasy obiektów
			Normalizując do 2NF, wydzielić należy zbiór atrybutów (kolumn) który jest zależny tylko od klucza głównego. Wszystkie atrybuty informacyjne (nie należące do klucza), muszą zawierać informacje o elementach tej konkretnej klasy (encji, tabeli) a nie żadnej innej.

* TRZECIA POSTAĆ NORMALNA
   kolumna informacyjna nie należąca do klucza nie zależy też od innej kolumny informacyjnej, nie należącej do klucza (Czyli każdy niekluczowy argument jest bezpośrednio zależny tylko od klucza głównego a
   nie od innej kolumny )

DANE/TEKST JAKO KOLUMNY — ROZDZIELANIE KOLUMNY NA NP. DWIE

SELECT listy.nazwa, AVG( punktacja.punkty ) FROM punktacja, listy WHERE punktacja.id_listy = listy.id_listy GROUP BY listy.nazwa
SELECT listy.nazwa, AVG( punktacja.punkty ) FROM punktacja, listy WHERE punktacja.id_listy = listy.id_listy GROUP BY listy.nazwa HAVING ( ( listy.nazwa LIKE 'C%' ) )
avg - pole wyliczeniowe
